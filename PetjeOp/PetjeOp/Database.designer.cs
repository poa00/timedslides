#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PetjeOp
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="kbs2")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InserttblTeacher(tblTeacher instance);
    partial void UpdatetblTeacher(tblTeacher instance);
    partial void DeletetblTeacher(tblTeacher instance);
    partial void InserttblClass(tblClass instance);
    partial void UpdatetblClass(tblClass instance);
    partial void DeletetblClass(tblClass instance);
    partial void InserttblLecture(tblLecture instance);
    partial void UpdatetblLecture(tblLecture instance);
    partial void DeletetblLecture(tblLecture instance);
    partial void InserttblStudent(tblStudent instance);
    partial void UpdatetblStudent(tblStudent instance);
    partial void DeletetblStudent(tblStudent instance);
    partial void InserttblSubject(tblSubject instance);
    partial void UpdatetblSubject(tblSubject instance);
    partial void DeletetblSubject(tblSubject instance);
    partial void InserttblAnswer(tblAnswer instance);
    partial void UpdatetblAnswer(tblAnswer instance);
    partial void DeletetblAnswer(tblAnswer instance);
    partial void InserttblQuestion(tblQuestion instance);
    partial void UpdatetblQuestion(tblQuestion instance);
    partial void DeletetblQuestion(tblQuestion instance);
    partial void InserttblAnsweroption(tblAnsweroption instance);
    partial void UpdatetblAnsweroption(tblAnsweroption instance);
    partial void DeletetblAnsweroption(tblAnsweroption instance);
    partial void InserttblExam(tblExam instance);
    partial void UpdatetblExam(tblExam instance);
    partial void DeletetblExam(tblExam instance);
    partial void InserttblQuestionnaire(tblQuestionnaire instance);
    partial void UpdatetblQuestionnaire(tblQuestionnaire instance);
    partial void DeletetblQuestionnaire(tblQuestionnaire instance);
    partial void InserttblResult(tblResult instance);
    partial void UpdatetblResult(tblResult instance);
    partial void DeletetblResult(tblResult instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::PetjeOp.Properties.Settings.Default.kbs2ConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tblTeacher> tblTeachers
		{
			get
			{
				return this.GetTable<tblTeacher>();
			}
		}
		
		public System.Data.Linq.Table<tblClass> tblClasses
		{
			get
			{
				return this.GetTable<tblClass>();
			}
		}
		
		public System.Data.Linq.Table<tblLecture> tblLectures
		{
			get
			{
				return this.GetTable<tblLecture>();
			}
		}
		
		public System.Data.Linq.Table<tblStudent> tblStudents
		{
			get
			{
				return this.GetTable<tblStudent>();
			}
		}
		
		public System.Data.Linq.Table<tblSubject> tblSubjects
		{
			get
			{
				return this.GetTable<tblSubject>();
			}
		}
		
		public System.Data.Linq.Table<tblAnswer> tblAnswers
		{
			get
			{
				return this.GetTable<tblAnswer>();
			}
		}
		
		public System.Data.Linq.Table<tblQuestion> tblQuestions
		{
			get
			{
				return this.GetTable<tblQuestion>();
			}
		}
		
		public System.Data.Linq.Table<tblAnsweroption> tblAnsweroptions
		{
			get
			{
				return this.GetTable<tblAnsweroption>();
			}
		}
		
		public System.Data.Linq.Table<tblExam> tblExams
		{
			get
			{
				return this.GetTable<tblExam>();
			}
		}
		
		public System.Data.Linq.Table<tblQuestionnaire> tblQuestionnaires
		{
			get
			{
				return this.GetTable<tblQuestionnaire>();
			}
		}
		
		public System.Data.Linq.Table<tblResult> tblResults
		{
			get
			{
				return this.GetTable<tblResult>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.teacher")]
	public partial class tblTeacher : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _nr;
		
		private string _firstname;
		
		private string _surname;
		
		private EntitySet<tblLecture> _lectures;
		
		private EntitySet<tblQuestionnaire> _tblQuestionnaires;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnrChanging(string value);
    partial void OnnrChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    #endregion
		
		public tblTeacher()
		{
			this._lectures = new EntitySet<tblLecture>(new Action<tblLecture>(this.attach_lectures), new Action<tblLecture>(this.detach_lectures));
			this._tblQuestionnaires = new EntitySet<tblQuestionnaire>(new Action<tblQuestionnaire>(this.attach_tblQuestionnaires), new Action<tblQuestionnaire>(this.detach_tblQuestionnaires));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nr", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string nr
		{
			get
			{
				return this._nr;
			}
			set
			{
				if ((this._nr != value))
				{
					this.OnnrChanging(value);
					this.SendPropertyChanging();
					this._nr = value;
					this.SendPropertyChanged("nr");
					this.OnnrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTeacher_tblLecture", Storage="_lectures", ThisKey="nr", OtherKey="teacher")]
		public EntitySet<tblLecture> tblLectures
		{
			get
			{
				return this._lectures;
			}
			set
			{
				this._lectures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTeacher_tblQuestionnaire", Storage="_tblQuestionnaires", ThisKey="nr", OtherKey="author")]
		public EntitySet<tblQuestionnaire> tblQuestionnaires
		{
			get
			{
				return this._tblQuestionnaires;
			}
			set
			{
				this._tblQuestionnaires.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lectures(tblLecture entity)
		{
			this.SendPropertyChanging();
			entity.tblTeacher = this;
		}
		
		private void detach_lectures(tblLecture entity)
		{
			this.SendPropertyChanging();
			entity.tblTeacher = null;
		}
		
		private void attach_tblQuestionnaires(tblQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.tblTeacher = this;
		}
		
		private void detach_tblQuestionnaires(tblQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.tblTeacher = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.class")]
	public partial class tblClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _code;
		
		private EntitySet<tblLecture> _lectures;
		
		private EntitySet<tblStudent> _students;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OncodeChanging(string value);
    partial void OncodeChanged();
    #endregion
		
		public tblClass()
		{
			this._lectures = new EntitySet<tblLecture>(new Action<tblLecture>(this.attach_lectures), new Action<tblLecture>(this.detach_lectures));
			this._students = new EntitySet<tblStudent>(new Action<tblStudent>(this.attach_students), new Action<tblStudent>(this.detach_students));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_code", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string code
		{
			get
			{
				return this._code;
			}
			set
			{
				if ((this._code != value))
				{
					this.OncodeChanging(value);
					this.SendPropertyChanging();
					this._code = value;
					this.SendPropertyChanged("code");
					this.OncodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClass_tblLecture", Storage="_lectures", ThisKey="code", OtherKey="class")]
		public EntitySet<tblLecture> tblLectures
		{
			get
			{
				return this._lectures;
			}
			set
			{
				this._lectures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClass_tblStudent", Storage="_students", ThisKey="code", OtherKey="class")]
		public EntitySet<tblStudent> tblStudents
		{
			get
			{
				return this._students;
			}
			set
			{
				this._students.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lectures(tblLecture entity)
		{
			this.SendPropertyChanging();
			entity.tblClass = this;
		}
		
		private void detach_lectures(tblLecture entity)
		{
			this.SendPropertyChanging();
			entity.tblClass = null;
		}
		
		private void attach_students(tblStudent entity)
		{
			this.SendPropertyChanging();
			entity.tblClass = this;
		}
		
		private void detach_students(tblStudent entity)
		{
			this.SendPropertyChanging();
			entity.tblClass = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.lecture")]
	public partial class tblLecture : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _teacher;
		
		private string _class;
		
		private int _subject;
		
		private EntitySet<tblExam> _exams;
		
		private EntityRef<tblClass> _class1;
		
		private EntityRef<tblTeacher> _teacher1;
		
		private EntityRef<tblSubject> _subject1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnteacherChanging(string value);
    partial void OnteacherChanged();
    partial void OnclassChanging(string value);
    partial void OnclassChanged();
    partial void OnsubjectChanging(int value);
    partial void OnsubjectChanged();
    #endregion
		
		public tblLecture()
		{
			this._exams = new EntitySet<tblExam>(new Action<tblExam>(this.attach_exams), new Action<tblExam>(this.detach_exams));
			this._class1 = default(EntityRef<tblClass>);
			this._teacher1 = default(EntityRef<tblTeacher>);
			this._subject1 = default(EntityRef<tblSubject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_teacher", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string teacher
		{
			get
			{
				return this._teacher;
			}
			set
			{
				if ((this._teacher != value))
				{
					if (this._teacher1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnteacherChanging(value);
					this.SendPropertyChanging();
					this._teacher = value;
					this.SendPropertyChanged("teacher");
					this.OnteacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="class", Storage="_class", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string @class
		{
			get
			{
				return this._class;
			}
			set
			{
				if ((this._class != value))
				{
					if (this._class1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassChanging(value);
					this.SendPropertyChanging();
					this._class = value;
					this.SendPropertyChanged("@class");
					this.OnclassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="Int NOT NULL")]
		public int subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					if (this._subject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLecture_tblExam", Storage="_exams", ThisKey="id", OtherKey="lecture")]
		public EntitySet<tblExam> tblExams
		{
			get
			{
				return this._exams;
			}
			set
			{
				this._exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClass_tblLecture", Storage="_class1", ThisKey="class", OtherKey="code", IsForeignKey=true)]
		public tblClass tblClass
		{
			get
			{
				return this._class1.Entity;
			}
			set
			{
				tblClass previousValue = this._class1.Entity;
				if (((previousValue != value) 
							|| (this._class1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._class1.Entity = null;
						previousValue.tblLectures.Remove(this);
					}
					this._class1.Entity = value;
					if ((value != null))
					{
						value.tblLectures.Add(this);
						this._class = value.code;
					}
					else
					{
						this._class = default(string);
					}
					this.SendPropertyChanged("tblClass");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTeacher_tblLecture", Storage="_teacher1", ThisKey="teacher", OtherKey="nr", IsForeignKey=true)]
		public tblTeacher tblTeacher
		{
			get
			{
				return this._teacher1.Entity;
			}
			set
			{
				tblTeacher previousValue = this._teacher1.Entity;
				if (((previousValue != value) 
							|| (this._teacher1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._teacher1.Entity = null;
						previousValue.tblLectures.Remove(this);
					}
					this._teacher1.Entity = value;
					if ((value != null))
					{
						value.tblLectures.Add(this);
						this._teacher = value.nr;
					}
					else
					{
						this._teacher = default(string);
					}
					this.SendPropertyChanged("tblTeacher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubject_tblLecture", Storage="_subject1", ThisKey="subject", OtherKey="id", IsForeignKey=true)]
		public tblSubject tblSubject
		{
			get
			{
				return this._subject1.Entity;
			}
			set
			{
				tblSubject previousValue = this._subject1.Entity;
				if (((previousValue != value) 
							|| (this._subject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._subject1.Entity = null;
						previousValue.tblLectures.Remove(this);
					}
					this._subject1.Entity = value;
					if ((value != null))
					{
						value.tblLectures.Add(this);
						this._subject = value.id;
					}
					else
					{
						this._subject = default(int);
					}
					this.SendPropertyChanged("tblSubject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_exams(tblExam entity)
		{
			this.SendPropertyChanging();
			entity.tblLecture = this;
		}
		
		private void detach_exams(tblExam entity)
		{
			this.SendPropertyChanging();
			entity.tblLecture = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student")]
	public partial class tblStudent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _nr;
		
		private string _firstname;
		
		private string _surname;
		
		private string _class;
		
		private EntitySet<tblResult> _tblResults;
		
		private EntityRef<tblClass> _class1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnrChanging(string value);
    partial void OnnrChanged();
    partial void OnfirstnameChanging(string value);
    partial void OnfirstnameChanged();
    partial void OnsurnameChanging(string value);
    partial void OnsurnameChanged();
    partial void OnclassChanging(string value);
    partial void OnclassChanged();
    #endregion
		
		public tblStudent()
		{
			this._tblResults = new EntitySet<tblResult>(new Action<tblResult>(this.attach_tblResults), new Action<tblResult>(this.detach_tblResults));
			this._class1 = default(EntityRef<tblClass>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nr", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string nr
		{
			get
			{
				return this._nr;
			}
			set
			{
				if ((this._nr != value))
				{
					this.OnnrChanging(value);
					this.SendPropertyChanging();
					this._nr = value;
					this.SendPropertyChanged("nr");
					this.OnnrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_firstname", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string firstname
		{
			get
			{
				return this._firstname;
			}
			set
			{
				if ((this._firstname != value))
				{
					this.OnfirstnameChanging(value);
					this.SendPropertyChanging();
					this._firstname = value;
					this.SendPropertyChanged("firstname");
					this.OnfirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_surname", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string surname
		{
			get
			{
				return this._surname;
			}
			set
			{
				if ((this._surname != value))
				{
					this.OnsurnameChanging(value);
					this.SendPropertyChanging();
					this._surname = value;
					this.SendPropertyChanged("surname");
					this.OnsurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="class", Storage="_class", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string @class
		{
			get
			{
				return this._class;
			}
			set
			{
				if ((this._class != value))
				{
					if (this._class1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnclassChanging(value);
					this.SendPropertyChanging();
					this._class = value;
					this.SendPropertyChanged("@class");
					this.OnclassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStudent_tblResult", Storage="_tblResults", ThisKey="nr", OtherKey="student")]
		public EntitySet<tblResult> tblResults
		{
			get
			{
				return this._tblResults;
			}
			set
			{
				this._tblResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblClass_tblStudent", Storage="_class1", ThisKey="class", OtherKey="code", IsForeignKey=true)]
		public tblClass tblClass
		{
			get
			{
				return this._class1.Entity;
			}
			set
			{
				tblClass previousValue = this._class1.Entity;
				if (((previousValue != value) 
							|| (this._class1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._class1.Entity = null;
						previousValue.tblStudents.Remove(this);
					}
					this._class1.Entity = value;
					if ((value != null))
					{
						value.tblStudents.Add(this);
						this._class = value.code;
					}
					else
					{
						this._class = default(string);
					}
					this.SendPropertyChanged("tblClass");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = this;
		}
		
		private void detach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblStudent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.subject")]
	public partial class tblSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<tblLecture> _lectures;
		
		private EntitySet<tblQuestionnaire> _tblQuestionnaires;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public tblSubject()
		{
			this._lectures = new EntitySet<tblLecture>(new Action<tblLecture>(this.attach_lectures), new Action<tblLecture>(this.detach_lectures));
			this._tblQuestionnaires = new EntitySet<tblQuestionnaire>(new Action<tblQuestionnaire>(this.attach_tblQuestionnaires), new Action<tblQuestionnaire>(this.detach_tblQuestionnaires));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubject_tblLecture", Storage="_lectures", ThisKey="id", OtherKey="subject")]
		public EntitySet<tblLecture> tblLectures
		{
			get
			{
				return this._lectures;
			}
			set
			{
				this._lectures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubject_tblQuestionnaire", Storage="_tblQuestionnaires", ThisKey="id", OtherKey="subject")]
		public EntitySet<tblQuestionnaire> tblQuestionnaires
		{
			get
			{
				return this._tblQuestionnaires;
			}
			set
			{
				this._tblQuestionnaires.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_lectures(tblLecture entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = this;
		}
		
		private void detach_lectures(tblLecture entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = null;
		}
		
		private void attach_tblQuestionnaires(tblQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = this;
		}
		
		private void detach_tblQuestionnaires(tblQuestionnaire entity)
		{
			this.SendPropertyChanging();
			entity.tblSubject = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answer")]
	public partial class tblAnswer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _description;
		
		private EntitySet<tblQuestion> _tblQuestions;
		
		private EntitySet<tblAnsweroption> _tblAnsweroptions;
		
		private EntitySet<tblResult> _tblResults;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    #endregion
		
		public tblAnswer()
		{
			this._tblQuestions = new EntitySet<tblQuestion>(new Action<tblQuestion>(this.attach_tblQuestions), new Action<tblQuestion>(this.detach_tblQuestions));
			this._tblAnsweroptions = new EntitySet<tblAnsweroption>(new Action<tblAnsweroption>(this.attach_tblAnsweroptions), new Action<tblAnsweroption>(this.detach_tblAnsweroptions));
			this._tblResults = new EntitySet<tblResult>(new Action<tblResult>(this.attach_tblResults), new Action<tblResult>(this.detach_tblResults));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAnswer_tblQuestion", Storage="_tblQuestions", ThisKey="id", OtherKey="correctanswer")]
		public EntitySet<tblQuestion> tblQuestions
		{
			get
			{
				return this._tblQuestions;
			}
			set
			{
				this._tblQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAnswer_tblAnsweroption", Storage="_tblAnsweroptions", ThisKey="id", OtherKey="answer")]
		public EntitySet<tblAnsweroption> tblAnsweroptions
		{
			get
			{
				return this._tblAnsweroptions;
			}
			set
			{
				this._tblAnsweroptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAnswer_tblResult", Storage="_tblResults", ThisKey="id", OtherKey="answer")]
		public EntitySet<tblResult> tblResults
		{
			get
			{
				return this._tblResults;
			}
			set
			{
				this._tblResults.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblQuestions(tblQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblAnswer = this;
		}
		
		private void detach_tblQuestions(tblQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblAnswer = null;
		}
		
		private void attach_tblAnsweroptions(tblAnsweroption entity)
		{
			this.SendPropertyChanging();
			entity.tblAnswer = this;
		}
		
		private void detach_tblAnsweroptions(tblAnsweroption entity)
		{
			this.SendPropertyChanging();
			entity.tblAnswer = null;
		}
		
		private void attach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblAnswer = this;
		}
		
		private void detach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblAnswer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.question")]
	public partial class tblQuestion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _description;
		
		private int _correctanswer;
		
		private int _questionnaire;
		
		private int _questionindex;
		
		private System.Nullable<long> _timerestriction;
		
		private EntitySet<tblAnsweroption> _tblAnsweroptions;
		
		private EntitySet<tblExam> _exams;
		
		private EntitySet<tblResult> _tblResults;
		
		private EntityRef<tblAnswer> _tblAnswer;
		
		private EntityRef<tblQuestionnaire> _tblQuestionnaire;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OncorrectanswerChanging(int value);
    partial void OncorrectanswerChanged();
    partial void OnquestionnaireChanging(int value);
    partial void OnquestionnaireChanged();
    partial void OnquestionindexChanging(int value);
    partial void OnquestionindexChanged();
    partial void OntimerestrictionChanging(System.Nullable<long> value);
    partial void OntimerestrictionChanged();
    #endregion
		
		public tblQuestion()
		{
			this._tblAnsweroptions = new EntitySet<tblAnsweroption>(new Action<tblAnsweroption>(this.attach_tblAnsweroptions), new Action<tblAnsweroption>(this.detach_tblAnsweroptions));
			this._exams = new EntitySet<tblExam>(new Action<tblExam>(this.attach_exams), new Action<tblExam>(this.detach_exams));
			this._tblResults = new EntitySet<tblResult>(new Action<tblResult>(this.attach_tblResults), new Action<tblResult>(this.detach_tblResults));
			this._tblAnswer = default(EntityRef<tblAnswer>);
			this._tblQuestionnaire = default(EntityRef<tblQuestionnaire>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_correctanswer", DbType="Int NOT NULL")]
		public int correctanswer
		{
			get
			{
				return this._correctanswer;
			}
			set
			{
				if ((this._correctanswer != value))
				{
					if (this._tblAnswer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncorrectanswerChanging(value);
					this.SendPropertyChanging();
					this._correctanswer = value;
					this.SendPropertyChanged("correctanswer");
					this.OncorrectanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionnaire", DbType="Int NOT NULL")]
		public int questionnaire
		{
			get
			{
				return this._questionnaire;
			}
			set
			{
				if ((this._questionnaire != value))
				{
					if (this._tblQuestionnaire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionnaireChanging(value);
					this.SendPropertyChanging();
					this._questionnaire = value;
					this.SendPropertyChanged("questionnaire");
					this.OnquestionnaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionindex", DbType="Int NOT NULL")]
		public int questionindex
		{
			get
			{
				return this._questionindex;
			}
			set
			{
				if ((this._questionindex != value))
				{
					this.OnquestionindexChanging(value);
					this.SendPropertyChanging();
					this._questionindex = value;
					this.SendPropertyChanged("questionindex");
					this.OnquestionindexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_timerestriction", DbType="BigInt")]
		public System.Nullable<long> timerestriction
		{
			get
			{
				return this._timerestriction;
			}
			set
			{
				if ((this._timerestriction != value))
				{
					this.OntimerestrictionChanging(value);
					this.SendPropertyChanging();
					this._timerestriction = value;
					this.SendPropertyChanged("timerestriction");
					this.OntimerestrictionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestion_tblAnsweroption", Storage="_tblAnsweroptions", ThisKey="id", OtherKey="question")]
		public EntitySet<tblAnsweroption> tblAnsweroptions
		{
			get
			{
				return this._tblAnsweroptions;
			}
			set
			{
				this._tblAnsweroptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestion_tblExam", Storage="_exams", ThisKey="id", OtherKey="currentquestion")]
		public EntitySet<tblExam> tblExams
		{
			get
			{
				return this._exams;
			}
			set
			{
				this._exams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestion_tblResult", Storage="_tblResults", ThisKey="id", OtherKey="question")]
		public EntitySet<tblResult> tblResults
		{
			get
			{
				return this._tblResults;
			}
			set
			{
				this._tblResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAnswer_tblQuestion", Storage="_tblAnswer", ThisKey="correctanswer", OtherKey="id", IsForeignKey=true)]
		public tblAnswer tblAnswer
		{
			get
			{
				return this._tblAnswer.Entity;
			}
			set
			{
				tblAnswer previousValue = this._tblAnswer.Entity;
				if (((previousValue != value) 
							|| (this._tblAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAnswer.Entity = null;
						previousValue.tblQuestions.Remove(this);
					}
					this._tblAnswer.Entity = value;
					if ((value != null))
					{
						value.tblQuestions.Add(this);
						this._correctanswer = value.id;
					}
					else
					{
						this._correctanswer = default(int);
					}
					this.SendPropertyChanged("tblAnswer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestionnaire_tblQuestion", Storage="_tblQuestionnaire", ThisKey="questionnaire", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblQuestionnaire tblQuestionnaire
		{
			get
			{
				return this._tblQuestionnaire.Entity;
			}
			set
			{
				tblQuestionnaire previousValue = this._tblQuestionnaire.Entity;
				if (((previousValue != value) 
							|| (this._tblQuestionnaire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblQuestionnaire.Entity = null;
						previousValue.tblQuestions.Remove(this);
					}
					this._tblQuestionnaire.Entity = value;
					if ((value != null))
					{
						value.tblQuestions.Add(this);
						this._questionnaire = value.id;
					}
					else
					{
						this._questionnaire = default(int);
					}
					this.SendPropertyChanged("tblQuestionnaire");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblAnsweroptions(tblAnsweroption entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestion = this;
		}
		
		private void detach_tblAnsweroptions(tblAnsweroption entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestion = null;
		}
		
		private void attach_exams(tblExam entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestion = this;
		}
		
		private void detach_exams(tblExam entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestion = null;
		}
		
		private void attach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestion = this;
		}
		
		private void detach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.answeroption")]
	public partial class tblAnsweroption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _question;
		
		private int _answer;
		
		private EntityRef<tblAnswer> _tblAnswer;
		
		private EntityRef<tblQuestion> _tblQuestion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnquestionChanging(int value);
    partial void OnquestionChanged();
    partial void OnanswerChanging(int value);
    partial void OnanswerChanged();
    #endregion
		
		public tblAnsweroption()
		{
			this._tblAnswer = default(EntityRef<tblAnswer>);
			this._tblQuestion = default(EntityRef<tblQuestion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int question
		{
			get
			{
				return this._question;
			}
			set
			{
				if ((this._question != value))
				{
					if (this._tblQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionChanging(value);
					this.SendPropertyChanging();
					this._question = value;
					this.SendPropertyChanged("question");
					this.OnquestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					if (this._tblAnswer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAnswer_tblAnsweroption", Storage="_tblAnswer", ThisKey="answer", OtherKey="id", IsForeignKey=true)]
		public tblAnswer tblAnswer
		{
			get
			{
				return this._tblAnswer.Entity;
			}
			set
			{
				tblAnswer previousValue = this._tblAnswer.Entity;
				if (((previousValue != value) 
							|| (this._tblAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAnswer.Entity = null;
						previousValue.tblAnsweroptions.Remove(this);
					}
					this._tblAnswer.Entity = value;
					if ((value != null))
					{
						value.tblAnsweroptions.Add(this);
						this._answer = value.id;
					}
					else
					{
						this._answer = default(int);
					}
					this.SendPropertyChanged("tblAnswer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestion_tblAnsweroption", Storage="_tblQuestion", ThisKey="question", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblQuestion tblQuestion
		{
			get
			{
				return this._tblQuestion.Entity;
			}
			set
			{
				tblQuestion previousValue = this._tblQuestion.Entity;
				if (((previousValue != value) 
							|| (this._tblQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblQuestion.Entity = null;
						previousValue.tblAnsweroptions.Remove(this);
					}
					this._tblQuestion.Entity = value;
					if ((value != null))
					{
						value.tblAnsweroptions.Add(this);
						this._question = value.id;
					}
					else
					{
						this._question = default(int);
					}
					this.SendPropertyChanged("tblQuestion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.exam")]
	public partial class tblExam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _questionnaire;
		
		private int _lecture;
		
		private System.Nullable<System.DateTime> _starttime;
		
		private System.Nullable<System.DateTime> _endtime;
		
		private System.Nullable<int> _currentquestion;
		
		private EntitySet<tblResult> _tblResults;
		
		private EntityRef<tblQuestion> _tblQuestion;
		
		private EntityRef<tblLecture> _tblLecture;
		
		private EntityRef<tblQuestionnaire> _tblQuestionnaire;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnquestionnaireChanging(int value);
    partial void OnquestionnaireChanged();
    partial void OnlectureChanging(int value);
    partial void OnlectureChanged();
    partial void OnstarttimeChanging(System.Nullable<System.DateTime> value);
    partial void OnstarttimeChanged();
    partial void OnendtimeChanging(System.Nullable<System.DateTime> value);
    partial void OnendtimeChanged();
    partial void OncurrentquestionChanging(System.Nullable<int> value);
    partial void OncurrentquestionChanged();
    #endregion
		
		public tblExam()
		{
			this._tblResults = new EntitySet<tblResult>(new Action<tblResult>(this.attach_tblResults), new Action<tblResult>(this.detach_tblResults));
			this._tblQuestion = default(EntityRef<tblQuestion>);
			this._tblLecture = default(EntityRef<tblLecture>);
			this._tblQuestionnaire = default(EntityRef<tblQuestionnaire>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_questionnaire", DbType="Int NOT NULL")]
		public int questionnaire
		{
			get
			{
				return this._questionnaire;
			}
			set
			{
				if ((this._questionnaire != value))
				{
					if (this._tblQuestionnaire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionnaireChanging(value);
					this.SendPropertyChanging();
					this._questionnaire = value;
					this.SendPropertyChanged("questionnaire");
					this.OnquestionnaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lecture", DbType="Int NOT NULL")]
		public int lecture
		{
			get
			{
				return this._lecture;
			}
			set
			{
				if ((this._lecture != value))
				{
					if (this._tblLecture.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnlectureChanging(value);
					this.SendPropertyChanging();
					this._lecture = value;
					this.SendPropertyChanged("lecture");
					this.OnlectureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_starttime", DbType="DateTime2")]
		public System.Nullable<System.DateTime> starttime
		{
			get
			{
				return this._starttime;
			}
			set
			{
				if ((this._starttime != value))
				{
					this.OnstarttimeChanging(value);
					this.SendPropertyChanging();
					this._starttime = value;
					this.SendPropertyChanged("starttime");
					this.OnstarttimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_endtime", DbType="DateTime2")]
		public System.Nullable<System.DateTime> endtime
		{
			get
			{
				return this._endtime;
			}
			set
			{
				if ((this._endtime != value))
				{
					this.OnendtimeChanging(value);
					this.SendPropertyChanging();
					this._endtime = value;
					this.SendPropertyChanged("endtime");
					this.OnendtimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_currentquestion", DbType="Int")]
		public System.Nullable<int> currentquestion
		{
			get
			{
				return this._currentquestion;
			}
			set
			{
				if ((this._currentquestion != value))
				{
					if (this._tblQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncurrentquestionChanging(value);
					this.SendPropertyChanging();
					this._currentquestion = value;
					this.SendPropertyChanged("currentquestion");
					this.OncurrentquestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblExam_tblResult", Storage="_tblResults", ThisKey="id", OtherKey="exam")]
		public EntitySet<tblResult> tblResults
		{
			get
			{
				return this._tblResults;
			}
			set
			{
				this._tblResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestion_tblExam", Storage="_tblQuestion", ThisKey="currentquestion", OtherKey="id", IsForeignKey=true)]
		public tblQuestion tblQuestion
		{
			get
			{
				return this._tblQuestion.Entity;
			}
			set
			{
				tblQuestion previousValue = this._tblQuestion.Entity;
				if (((previousValue != value) 
							|| (this._tblQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblQuestion.Entity = null;
						previousValue.tblExams.Remove(this);
					}
					this._tblQuestion.Entity = value;
					if ((value != null))
					{
						value.tblExams.Add(this);
						this._currentquestion = value.id;
					}
					else
					{
						this._currentquestion = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblLecture_tblExam", Storage="_tblLecture", ThisKey="lecture", OtherKey="id", IsForeignKey=true)]
		public tblLecture tblLecture
		{
			get
			{
				return this._tblLecture.Entity;
			}
			set
			{
				tblLecture previousValue = this._tblLecture.Entity;
				if (((previousValue != value) 
							|| (this._tblLecture.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblLecture.Entity = null;
						previousValue.tblExams.Remove(this);
					}
					this._tblLecture.Entity = value;
					if ((value != null))
					{
						value.tblExams.Add(this);
						this._lecture = value.id;
					}
					else
					{
						this._lecture = default(int);
					}
					this.SendPropertyChanged("tblLecture");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestionnaire_tblExam", Storage="_tblQuestionnaire", ThisKey="questionnaire", OtherKey="id", IsForeignKey=true)]
		public tblQuestionnaire tblQuestionnaire
		{
			get
			{
				return this._tblQuestionnaire.Entity;
			}
			set
			{
				tblQuestionnaire previousValue = this._tblQuestionnaire.Entity;
				if (((previousValue != value) 
							|| (this._tblQuestionnaire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblQuestionnaire.Entity = null;
						previousValue.tblExams.Remove(this);
					}
					this._tblQuestionnaire.Entity = value;
					if ((value != null))
					{
						value.tblExams.Add(this);
						this._questionnaire = value.id;
					}
					else
					{
						this._questionnaire = default(int);
					}
					this.SendPropertyChanged("tblQuestionnaire");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblExam = this;
		}
		
		private void detach_tblResults(tblResult entity)
		{
			this.SendPropertyChanging();
			entity.tblExam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.questionnaire")]
	public partial class tblQuestionnaire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _author;
		
		private string _description;
		
		private int _subject;
		
		private bool _archived;
		
		private EntitySet<tblQuestion> _tblQuestions;
		
		private EntitySet<tblExam> _tblExams;
		
		private EntityRef<tblTeacher> _tblTeacher;
		
		private EntityRef<tblSubject> _tblSubject;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnauthorChanging(string value);
    partial void OnauthorChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnsubjectChanging(int value);
    partial void OnsubjectChanged();
    partial void OnarchivedChanging(bool value);
    partial void OnarchivedChanged();
    #endregion
		
		public tblQuestionnaire()
		{
			this._tblQuestions = new EntitySet<tblQuestion>(new Action<tblQuestion>(this.attach_tblQuestions), new Action<tblQuestion>(this.detach_tblQuestions));
			this._tblExams = new EntitySet<tblExam>(new Action<tblExam>(this.attach_tblExams), new Action<tblExam>(this.detach_tblExams));
			this._tblTeacher = default(EntityRef<tblTeacher>);
			this._tblSubject = default(EntityRef<tblSubject>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_author", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string author
		{
			get
			{
				return this._author;
			}
			set
			{
				if ((this._author != value))
				{
					if (this._tblTeacher.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnauthorChanging(value);
					this.SendPropertyChanging();
					this._author = value;
					this.SendPropertyChanged("author");
					this.OnauthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subject", DbType="Int NOT NULL")]
		public int subject
		{
			get
			{
				return this._subject;
			}
			set
			{
				if ((this._subject != value))
				{
					if (this._tblSubject.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsubjectChanging(value);
					this.SendPropertyChanging();
					this._subject = value;
					this.SendPropertyChanged("subject");
					this.OnsubjectChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_archived", DbType="Bit NOT NULL")]
		public bool archived
		{
			get
			{
				return this._archived;
			}
			set
			{
				if ((this._archived != value))
				{
					this.OnarchivedChanging(value);
					this.SendPropertyChanging();
					this._archived = value;
					this.SendPropertyChanged("archived");
					this.OnarchivedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestionnaire_tblQuestion", Storage="_tblQuestions", ThisKey="id", OtherKey="questionnaire")]
		public EntitySet<tblQuestion> tblQuestions
		{
			get
			{
				return this._tblQuestions;
			}
			set
			{
				this._tblQuestions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestionnaire_tblExam", Storage="_tblExams", ThisKey="id", OtherKey="questionnaire")]
		public EntitySet<tblExam> tblExams
		{
			get
			{
				return this._tblExams;
			}
			set
			{
				this._tblExams.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblTeacher_tblQuestionnaire", Storage="_tblTeacher", ThisKey="author", OtherKey="nr", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public tblTeacher tblTeacher
		{
			get
			{
				return this._tblTeacher.Entity;
			}
			set
			{
				tblTeacher previousValue = this._tblTeacher.Entity;
				if (((previousValue != value) 
							|| (this._tblTeacher.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblTeacher.Entity = null;
						previousValue.tblQuestionnaires.Remove(this);
					}
					this._tblTeacher.Entity = value;
					if ((value != null))
					{
						value.tblQuestionnaires.Add(this);
						this._author = value.nr;
					}
					else
					{
						this._author = default(string);
					}
					this.SendPropertyChanged("tblTeacher");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblSubject_tblQuestionnaire", Storage="_tblSubject", ThisKey="subject", OtherKey="id", IsForeignKey=true)]
		public tblSubject tblSubject
		{
			get
			{
				return this._tblSubject.Entity;
			}
			set
			{
				tblSubject previousValue = this._tblSubject.Entity;
				if (((previousValue != value) 
							|| (this._tblSubject.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblSubject.Entity = null;
						previousValue.tblQuestionnaires.Remove(this);
					}
					this._tblSubject.Entity = value;
					if ((value != null))
					{
						value.tblQuestionnaires.Add(this);
						this._subject = value.id;
					}
					else
					{
						this._subject = default(int);
					}
					this.SendPropertyChanged("tblSubject");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tblQuestions(tblQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestionnaire = this;
		}
		
		private void detach_tblQuestions(tblQuestion entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestionnaire = null;
		}
		
		private void attach_tblExams(tblExam entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestionnaire = this;
		}
		
		private void detach_tblExams(tblExam entity)
		{
			this.SendPropertyChanging();
			entity.tblQuestionnaire = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.result")]
	public partial class tblResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _student;
		
		private int _exam;
		
		private System.Nullable<int> _answer;
		
		private int _question;
		
		private EntityRef<tblAnswer> _tblAnswer;
		
		private EntityRef<tblExam> _tblExam;
		
		private EntityRef<tblQuestion> _tblQuestion;
		
		private EntityRef<tblStudent> _tblStudent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentChanging(string value);
    partial void OnstudentChanged();
    partial void OnexamChanging(int value);
    partial void OnexamChanged();
    partial void OnanswerChanging(System.Nullable<int> value);
    partial void OnanswerChanged();
    partial void OnquestionChanging(int value);
    partial void OnquestionChanged();
    #endregion
		
		public tblResult()
		{
			this._tblAnswer = default(EntityRef<tblAnswer>);
			this._tblExam = default(EntityRef<tblExam>);
			this._tblQuestion = default(EntityRef<tblQuestion>);
			this._tblStudent = default(EntityRef<tblStudent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_student", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string student
		{
			get
			{
				return this._student;
			}
			set
			{
				if ((this._student != value))
				{
					if (this._tblStudent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnstudentChanging(value);
					this.SendPropertyChanging();
					this._student = value;
					this.SendPropertyChanged("student");
					this.OnstudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_exam", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int exam
		{
			get
			{
				return this._exam;
			}
			set
			{
				if ((this._exam != value))
				{
					if (this._tblExam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnexamChanging(value);
					this.SendPropertyChanging();
					this._exam = value;
					this.SendPropertyChanged("exam");
					this.OnexamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_answer", DbType="Int")]
		public System.Nullable<int> answer
		{
			get
			{
				return this._answer;
			}
			set
			{
				if ((this._answer != value))
				{
					if (this._tblAnswer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnanswerChanging(value);
					this.SendPropertyChanging();
					this._answer = value;
					this.SendPropertyChanged("answer");
					this.OnanswerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_question", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int question
		{
			get
			{
				return this._question;
			}
			set
			{
				if ((this._question != value))
				{
					if (this._tblQuestion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnquestionChanging(value);
					this.SendPropertyChanging();
					this._question = value;
					this.SendPropertyChanged("question");
					this.OnquestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblAnswer_tblResult", Storage="_tblAnswer", ThisKey="answer", OtherKey="id", IsForeignKey=true)]
		public tblAnswer tblAnswer
		{
			get
			{
				return this._tblAnswer.Entity;
			}
			set
			{
				tblAnswer previousValue = this._tblAnswer.Entity;
				if (((previousValue != value) 
							|| (this._tblAnswer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblAnswer.Entity = null;
						previousValue.tblResults.Remove(this);
					}
					this._tblAnswer.Entity = value;
					if ((value != null))
					{
						value.tblResults.Add(this);
						this._answer = value.id;
					}
					else
					{
						this._answer = default(Nullable<int>);
					}
					this.SendPropertyChanged("tblAnswer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblExam_tblResult", Storage="_tblExam", ThisKey="exam", OtherKey="id", IsForeignKey=true)]
		public tblExam tblExam
		{
			get
			{
				return this._tblExam.Entity;
			}
			set
			{
				tblExam previousValue = this._tblExam.Entity;
				if (((previousValue != value) 
							|| (this._tblExam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblExam.Entity = null;
						previousValue.tblResults.Remove(this);
					}
					this._tblExam.Entity = value;
					if ((value != null))
					{
						value.tblResults.Add(this);
						this._exam = value.id;
					}
					else
					{
						this._exam = default(int);
					}
					this.SendPropertyChanged("tblExam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblQuestion_tblResult", Storage="_tblQuestion", ThisKey="question", OtherKey="id", IsForeignKey=true)]
		public tblQuestion tblQuestion
		{
			get
			{
				return this._tblQuestion.Entity;
			}
			set
			{
				tblQuestion previousValue = this._tblQuestion.Entity;
				if (((previousValue != value) 
							|| (this._tblQuestion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblQuestion.Entity = null;
						previousValue.tblResults.Remove(this);
					}
					this._tblQuestion.Entity = value;
					if ((value != null))
					{
						value.tblResults.Add(this);
						this._question = value.id;
					}
					else
					{
						this._question = default(int);
					}
					this.SendPropertyChanged("tblQuestion");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tblStudent_tblResult", Storage="_tblStudent", ThisKey="student", OtherKey="nr", IsForeignKey=true)]
		public tblStudent tblStudent
		{
			get
			{
				return this._tblStudent.Entity;
			}
			set
			{
				tblStudent previousValue = this._tblStudent.Entity;
				if (((previousValue != value) 
							|| (this._tblStudent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tblStudent.Entity = null;
						previousValue.tblResults.Remove(this);
					}
					this._tblStudent.Entity = value;
					if ((value != null))
					{
						value.tblResults.Add(this);
						this._student = value.nr;
					}
					else
					{
						this._student = default(string);
					}
					this.SendPropertyChanged("tblStudent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
